# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT
#
#
from mastermind_engine import сheck_number, think_number
names=[]
gamer=''
move=0
total_gamers=0
def name_gamers():
    global names
    global total_gamers
    total_gamers=int(input('Введите количество игроков: '))
    for counter in range(1,int(total_gamers)+1):
        names.append(input('Введите имя игрока №{}:'.format(counter)))
    return names

def change_gamer():
    global gamer
    global move
    if move==total_gamers-1:
        move=0
        gamer=names[move]
    else:
        gamer=names[move]

def input_number():
    global move
    win=False
    while win==False:
        change_gamer()
        move += 1
        quessed =list(input('{} введите число: '.format(gamer)))
        while len(quessed) != 4:
            print('Число должно быть четырёхзначное!')
            quessed = list(input('Введите число: '))
        else:
            bull,cow=сheck_number(quessed)
            if bull==4:
                win=True
            else:
                print ('быков:', str(bull), 'коров:', str(cow))
    else:
        print(gamer, 'Поздравляем! Вы выиграли!')

name_gamers()
think_number()
input_number()